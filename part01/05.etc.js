// 목표: 데이터 모델링 문제점 해소
// 출처: 패캠 강의 개념 정리, 기출 문제 오답 분석!

// 데이터 모델링의 문제점 해소 

// 1. 1:1 관계 해소
// 1) 하나의 엔터티 타입으로 통합
//  1> 동일한 PK 구조 가지는 1:1 관계면 하나로 통합
//  2> PK가 동일 사용, 한 시점에 두 엔터티 타입이 동시 발생 금지
//  3> 두 엔터티 타입의 속성들이 비슷할 때는 하나로 통합

// 2) 부분 통합
// - PK 동일하더라도 내용이 다른 경우 별도 엔터티 타입 유지하거나 
//  하나의 엔터티타입으로 통합 때 PK 변경하여 통합
// - PK 속성들의 구조가 모두 비슷한 경우 편의상 하나로 통합하여 표현

// 3) 슈퍼 엔터티 타입 생성 
// - PK와 의미가 동일하고 속성의 일부만 다를 경우 슈퍼 타입으로 통합
// - 엔터티 타입의 PK가 같고 동일한 속성을 가지고 있으며, 일부 속성이 다르거나 
//   각각의 관계가 다른 엔터티 타입과 상이할 때 적용함


// 2. M:N 관계 해소 
// 1) 관계 엔터티타입 분리
// - M:N 관계는 기본적으로 관계 엔터티 타입 도출 해소
// - 관계 엡터티 타입은 업무에 의한 것보다 데이터 모델링 작성 중 관계시 발생
//   엔터티 타입명 실제 없는 경우가 많음
// - 작업
//   I) 주 식별자 통합:  데이터 모델 복잡도 감소, 물리 테이블에서 데이터 가져올 시 여러 테이블 조인하지 않음
//  II) 부모 엔터티 타입 속성 추가 : 해당 업무 규칙 최댓값 지정, 변경 가능성 적은 것 선정
//      => 모델 복잡도 감소, 물리테이블 조인 감소
// - 각 테이블의 PK를 FK로 참조하고 연결 테이블 사용하여 해소함


// 3. 엔터티 타입 통합 (동일 규칙 => 하나의 엔터티 타입 표현)
// 목적: 복집힌 모델 단순화, 엔터티 타입간 중복 제거, ERD 표현 단순화
// 문제점: 업무 확장성 감소, 데이터 모델 만으로 업무 흐름 파악 어려움, 시스템 성능 저하
//    속성 제약 조건 설정 어려움, 체크 조건 증가, 복잡 SQL 구문 필요함


// 4. 이력 엔터티타입 설계

// 4-1) 이력관리
// - 하나의 업무가 시간 흐름에 따라 발생하는 데이터
// - 과거/현재 데이터 지속적 관리 방법
// - 이력엔터티타입: 이력관리 위한 엔터티 타입
// - 과거 데이터 추적, 통계 데이터 이용

// 4-2) 이력 데이터 발생 유형 
// 1> 발생 이력: 시간에 따라 발생하는 데이터 모두 관리
// 2> 변경 이력: 업무상 필요에 의해 수정되면서 변경 전, 후 데이터 관리 ex) 주문수량변경, 상품 가격
// 3> 진행 이력: 프로세스가 진행되는 상태 모두 관리 ex) 주문 확인, 배송준비중, 출고완료


// 5. 성능 고려한 데이터 모델링

// 1] 정규화, 반정규화 성능 향상
// - 정규화 올바른 형성 => 입력, 수정, 삭제 성능 향상
// - 반정규화 많이 하면 조회 성능 향상 
// - 반정규화로 쿼리 단순화
// - 조인 비용 절약
// - 데이터 무결성 및 관리 주의 필요


// 2] pk, FK 순서 조정
// 1) PK 순서 조정으로 성능 향상
// - PK가 여러 속성 구성된 복합 식별자 => PK 순서로 성능차이 발생함
// - PK 순서 결정 기준 인덱스 효율적 이용 PK 순서 지정함
// - PK 만든 인덱스 사용되지 않으면 데이터 입력, 수정,삭제 시 불필요한 인덱스로 성능 저하 발생
// - 데이터 조회 패턴으로 PK 순서 지정 고려

// 2) FK 인덱스생성 성능 향상
// - FK 연쇄 삭제 제약이 걸려 있는 경우 FK 인덱스 부재로 전체 테이블 스캔 성능 저하 발생
//   => FK 사용되는 컬럼에 인덱스 추가하여 성능 향상


// 3] 컬럼 수가 많은 테이블의 1:1 분리
// - 컬럼 많은 테이블은 로우 체이닝, 로우 마이그레이션 많아져 성능 저하 발생
// - 컬럼 많은 테이블 경우 동시에 테이블의 데이터 한번에 다 보여줄 수 없음
//   => 테이블 분할해서 조회 범위 및 쓰기 시 영역 분산함.


// 4] 대용량 테이블 파티셔닝 성능 향상
// - 테이블 다량 데이터 저장 시 파티셔닝 적용, PK에 의해 테이블 분할하여 성능 향상.
// - 파티셔닝: 컬럼을 나누는 것이 아니라 파티션 키에 의해 데이터를 나누는 개념.
// - 파티션 키에 따라 분할되므로 파티션 키 정의가 중요함.


// 5] 복잡한 모델 단순화로 인한 성능 향상
// - 모델이 복잡한 경우 수정 사항이 발생할 경우 전체 수정으로 확대될 가능성 있음.
// - 업무 흐름에 따라 엔터티 타입, 관계, 속성등에 정의할 것


// 6] 일관성 있는 데이터 타입/길이로 성능 향상
// - 동일 속성의 컬럼에 데이터 타입 맞지 않아 형변환 발생으로 성능 저하 발생
// - 눈에 보이지 않는 암시적 형변환에 주의함